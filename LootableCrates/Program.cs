using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;

namespace LootableCrates
{
    class Program
    {
        private static readonly Random Random = new();

        private static Lazy<Settings.Settings> _settings = null!;

        private static readonly HashSet<FormLink<IStaticGetter>> Crates = new()
        {
            Skyrim.Static.CrateSmall01,
            Skyrim.Static.CrateSmall02,
            Skyrim.Static.CrateSmall03,
            Skyrim.Static.CrateSmall04,
            Skyrim.Static.CrateSmall01Weathered,
            Skyrim.Static.CrateSmall02Weathered,
            Skyrim.Static.CrateSmall03Weathered,
            Skyrim.Static.CrateSmall04Weathered,
            Skyrim.Static.CrateSmallLong01,
            Skyrim.Static.CrateSmallLong02,
            Skyrim.Static.CrateSmallLong03,
            Skyrim.Static.CrateSmallLong04,
            Skyrim.Static.CrateSmallLong01Weathered,
            Skyrim.Static.CrateSmallLong02Weathered,
            Skyrim.Static.CrateSmallLong03Weathered,
            Skyrim.Static.CrateSmallLong04Weathered,
            Skyrim.Static.CrateSmall01EECo,
            Skyrim.Static.CrateSmall03EECo,
            Skyrim.Static.CrateSmallLong01EECo,
            Skyrim.Static.CrateSmallLong04EECo
        };

        private static readonly HashSet<FormLink<IStaticGetter>> SnowCrates = new()
        {
            Skyrim.Static.CrateSmall01_LightSN,
            Skyrim.Static.CrateSmall02_LightSN,
            Skyrim.Static.CrateSmall01Weathered_LightSN,
            Skyrim.Static.CrateSmall02Weathered_LightSN,
            Skyrim.Static.CrateSmall03WeatheredLight_SN,
            Skyrim.Static.CrateSmall04WeatheredLight_SN,
            Skyrim.Static.CrateSmall03WeatheredSnow,
            Skyrim.Static.CrateSmall04WeatheredSnow,
            Skyrim.Static.CrateSmallLong01WeatheredLight_SN,
            Skyrim.Static.CrateSmallLong02WeatheredLight_SN,
            Skyrim.Static.CrateSmallLong01WeatheredSnow,
            Skyrim.Static.CrateSmallLong03WeatheredSnow,
        };
        
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "WiZkiD Lootable FireWood Piles_patch.esp")
                .Run(args);
        }

        private static List<Container> AddContainers(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            IFormLinkGetter<IStaticGetter> placedBaseLink)
        {
            var placedBase = placedBaseLink.Resolve(state.LinkCache);
            List<Container> containers = new();
            var count = 0;
            foreach (var loot in _settings.Value.Loot)
            {
                var container =
                    state.PatchMod.Containers.AddNew(placedBase.EditorID + "Container" + count);
                count++;
                container.ObjectBounds = placedBase.ObjectBounds.DeepCopy();
                var mask = new Model.TranslationMask(true)
                {
                    Data = false
                };
                container.Model = placedBase.Model?.DeepCopy(mask);
                container.Flags |= Container.Flag.Respawns;
                container.Name = new TranslatedString("Crate", Language.English);
                container.OpenSound = Skyrim.SoundDescriptor.DRScCrateOpenSD.AsNullable();
                container.CloseSound = Skyrim.SoundDescriptor.DRScCrateCloseSD.AsNullable();
                container.Items = new ExtendedList<ContainerEntry>();
                loot.ItemEntries.ForEach(x => container.Items.Add(new ContainerEntry
                {
                    Item = new ContainerItem
                    {
                        Count = x.Count,
                        Item = x.Item
                    }
                }));
                containers.Add(container);
            }
            
            return containers;
        }

        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            void ReplaceStatic(IModContext<ISkyrimMod, ISkyrimModGetter, IPlacedObject, IPlacedObjectGetter> placed, IList<Container> found)
            {
                var placedCopy = placed.GetOrAddAsOverride(state.PatchMod);
                if (found.Count == 0) return;
                var index = Random.Next(0, found.Count);
                placedCopy.Base.SetTo(found[index]);
            }

            Dictionary<IFormLinkGetter<ISkyrimMajorRecordGetter>,List<Container> > crateContainers = new();
            Crates.Select(x =>
            {
                List<Container> toAdd = AddContainers(state, x);
                return (x, toAdd);
            }).ForEach(tuple => crateContainers.Add(tuple.x, tuple.toAdd));

            if (_settings.Value.PatchSnowStatics)
            {
                SnowCrates.Select(x =>
                {
                    List<Container> toAdd = AddContainers(state, x);
                    return (x, toAdd);
                }).ForEach(tuple => crateContainers.Add(tuple.x, tuple.toAdd));
            }
            
            foreach (var placed in state.LoadOrder.PriorityOrder.PlacedObject()
                .WinningContextOverrides(state.LinkCache))
            {
                if (crateContainers.TryGetValue(placed.Record.Base, out var found))
                {
                    ReplaceStatic(placed, found);
                }
            }
        }
    }
}